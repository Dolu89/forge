"use strict";var R=Object.defineProperty;var v=(n,o,e)=>o in n?R(n,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[o]=e;var g=(n,o,e)=>(v(n,typeof o!="symbol"?o+"":o,e),e);const r=require("electron"),p=require("path"),h=require("node:fs/promises"),y=require("stream");var E=(n=>(n.NostrRsRelay="nostr-rs-relay",n))(E||{}),l=(n=>(n.Running="running",n.Stopped="stopped",n.Partial="partial",n))(l||{});function _({onlyFirst:n=!1}={}){const o=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(o,n?void 0:"g")}const I=process.env.VITE_DEV_SERVER_URL===void 0,m=require("dockerode"),S=require("dockerode-compose");class C{constructor(){g(this,"docker");console.log("docker service init"),this.intialize()}async intialize(){const o=[`${process.env.HOME}/.docker/run/docker.sock`,`${process.env.HOME}/.docker/desktop/docker.sock`,"/var/run/docker.sock"];for(const e of o)if(await h.stat(e)){console.log("docker socket detected:",e),this.docker=new m({socketPath:e});break}this.docker||(this.docker=new m)}async getDockerStatus(){return await this.intialize().catch(()=>{}),this.docker?l.Running:l.Stopped}async getStatus(o){if(!this.docker)throw new Error("Docker not initialized");let e=[];for(const t of o){const i=await this.getContainer(t).inspect();e.push(i.State.Status==="running")}return e.every(t=>t)?l.Running:e.some(t=>t)?l.Partial:l.Stopped}async startContainers(o){if(!this.docker)throw new Error("Docker not initialized");for(const e of o)await this.getContainer(e).start().catch(()=>console.log("Relay already started"))}async removeContainers(o){if(!this.docker)throw new Error("Docker not initialized");console.log("removing containers",o.join(", "));for(const e of o)await this.getContainer(e).remove()}getContainer(o){if(!this.docker)throw new Error("Docker not initialized");return this.docker.getContainer(o)}async stopContainers(o){if(!this.docker)throw new Error("Docker not initialized");for(const e of o)await this.getContainer(e).stop().catch(()=>console.log("Relay already stopped"))}async create(o,e,t){if(!this.docker)throw new Error("Docker not initialized");let s="",i="";switch(e){case E.NostrRsRelay:s="docker-compose.nostr-rs-relay.yml",i=(await h.readFile(`${r.app.getAppPath()}/docker/${s}`,"utf8")).replaceAll("{{tag}}",t).replaceAll("{{port}}",o.toString());break;default:throw new Error("Unknown relay type")}const c=`${r.app.getPath("userData")}/docker`;await h.mkdir(c,{recursive:!0});const u=`${c}/docker-compose.yml`;await h.writeFile(u,i);const d=await new S(this.docker,u,I?"forge":"forge_dev").up();return{port:o,containerIds:d.services.map(w=>w.id)}}streamLogs(o,e){const t=[];for(const c of o){const u=this.getContainer(c);var s=new y.PassThrough;t.push(s),s.on("data",function(k){let d=k.toString("utf8");d=d.replace(_(),""),e(d)}),u.logs({follow:!0,stdout:!0,stderr:!0,tail:100},function(k,d){k||u.modem.demuxStream(d,s,s)})}function i(){for(const c of t)c.destroy()}return i}}const a=new C;process.env.ROOT=p.join(__dirname,"..");process.env.DIST=p.join(process.env.ROOT,"dist-electron");process.env.VITE_PUBLIC=process.env.VITE_DEV_SERVER_URL?p.join(process.env.ROOT,"public"):p.join(process.env.ROOT,".output/public");process.env.ELECTRON_DISABLE_SECURITY_WARNINGS="true";let f;const D=p.join(process.env.DIST,"preload.js");function T(){f=new r.BrowserWindow({height:800,width:1200,webPreferences:{preload:D,nodeIntegrationInWorker:!0,contextIsolation:!0,nodeIntegration:!0,webSecurity:!1}});const n=new Map;function o(e){var t;n.has(e)&&((t=n.get(e))==null||t.close(),n.delete(e))}r.ipcMain.handle("docker:dockerStatus",async e=>a.getDockerStatus()),r.ipcMain.handle("docker:status",async(e,t)=>a.getStatus(t)),r.ipcMain.handle("docker:container",async(e,t)=>a.getContainer(t)),r.ipcMain.handle("docker:create",async(e,t,s,i)=>a.create(t,s,i)),r.ipcMain.handle("docker:remove",async(e,t)=>a.removeContainers(t)),r.ipcMain.handle("docker:start",async(e,t)=>a.startContainers(t)),r.ipcMain.handle("docker:stop",async(e,t)=>a.stopContainers(t)),r.ipcMain.handle("docker:stopStreamLogs",(e,t)=>{o(t)}),r.ipcMain.on("docker:streamLogs",(e,t)=>{const[s]=e.ports;o(t.key);const i=a.streamLogs(t.containerIds,c=>{s.postMessage(c)});n.set(t.key,{close:i})}),process.env.VITE_DEV_SERVER_URL?(f.loadURL(process.env.VITE_DEV_SERVER_URL),f.webContents.openDevTools()):f.loadFile(p.join(process.env.VITE_PUBLIC,"index.html"))}r.app.whenReady().then(T);
